---
# Copyright OpenSearch Contributors
# SPDX-License-Identifier: Apache-2.0

# Description:
# Default configuration for OpenSearch Dashboards

# OpenSearch Dashboards is served by a back end server. This setting specifies the port to use.
server.port: {{ opensearch_dashboards.server.port | default(5601) }}

# Specifies the address to which the OpenSearch Dashboards server will bind. IP addresses and host names are both valid values.
# The default is 'localhost', which usually means remote machines will not be able to connect.
# To allow connections from remote users, set this parameter to a non-loopback address.
server.host: "{{ opensearch_dashboards.server.host | default('localhost') }}"

# Enables you to specify a path to mount OpenSearch Dashboards at if you are running behind a proxy.
# Use the `server.rewriteBasePath` setting to tell OpenSearch Dashboards if it should remove the basePath
# from requests it receives, and to prevent a deprecation warning at startup.
# This setting cannot end in a slash.
{% if opensearch_dashboards.server.base_path is defined %}
server.basePath: "{{ opensearch_dashboards.server.base_path }}"
{% else %}
# server.basePath: ""
{% endif %}

# Specifies whether OpenSearch Dashboards should rewrite requests that are prefixed with
# `server.basePath` or require that they are rewritten by your reverse proxy.
server.rewriteBasePath: {{ opensearch_dashboards.server.rewrite_base_path | default(false) }}

# The maximum payload size in bytes for incoming server requests.
server.maxPayloadBytes: {{ opensearch_dashboards.server.max_payload_bytes | default(10485760) }}

# The OpenSearch Dashboards server's name.  This is used for display purposes.
server.name: "{{ opensearch_dashboards.server.name | default(inventory_hostname) }}"

# The URLs of the OpenSearch instances to use for all your queries.
opensearch.hosts:
{% for instance in opensearch_dashboards.opensearch.instance_list | default(["http://localhost:9200"]) %}
  - "{{ instance }}"
{% endfor %}

# OpenSearch Dashboards uses an index in OpenSearch to store saved searches, visualizations and
# dashboards. OpenSearch Dashboards creates a new index if the index doesn't already exist.
opensearchDashboards.index: "{{ opensearch_dashboards.dashboards.index | default('.opensearch_dashboards') }}"

# The default application to load.
opensearchDashboards.defaultAppId: "{{ opensearch_dashboards.dashboards.default_app_id | default('home') }}"

# Setting for an optimized healthcheck that only uses the local OpenSearch node to do Dashboards healthcheck.
# This settings should be used for large clusters or for clusters with ingest heavy nodes.
# It allows Dashboards to only healthcheck using the local OpenSearch node rather than fan out requests across all nodes.
#
# It requires the user to create an OpenSearch node attribute with the same name as the value used in the setting
# This node attribute should assign all nodes of the same cluster an integer value that increments with each new cluster that is spun up
# e.g. in opensearch.yml file you would set the value to a setting using node.attr.cluster_id:
# Should only be enabled if there is a corresponding node attribute created in your OpenSearch config that matches the value here
# opensearch.optimizedHealthcheckId: "cluster_id"

# If your OpenSearch is protected with basic authentication, these settings provide
# the username and password that the OpenSearch Dashboards server uses to perform maintenance on the OpenSearch Dashboards
# index at startup. Your OpenSearch Dashboards users still need to authenticate with OpenSearch, which
# is proxied through the OpenSearch Dashboards server.
opensearch.username: "{{ opensearch_dashboards.opensearch.connection_user_name }}"
opensearch.password: "{{ opensearch_dashboards.opensearch.connection_user_password }}"

# Enables SSL and paths to the PEM-format SSL certificate and SSL key files, respectively.
# These settings enable SSL for outgoing requests from the OpenSearch Dashboards server to the browser.
server.ssl.enabled: {{ 'true' if opensearch_dashboards.server.ssl.certificate is defined else 'false' }}
{% if opensearch_dashboards.server.ssl.certificate is defined %}
server.ssl.certificate: {{ opensearch_dashboards.server.ssl.certificate }}
server.ssl.key: {{ opensearch_dashboards.server.ssl.key }}
{% else %}
# server.ssl.certificate: /path/to/your/server.crt
# server.ssl.key: /path/to/your/server.key
{% endif %}

# Optional settings that provide the paths to the PEM-format SSL certificate and key files.
# These files are used to verify the identity of OpenSearch Dashboards to OpenSearch and are required when
# xpack.security.http.ssl.client_authentication in OpenSearch is set to required.
# opensearch.ssl.certificate: /path/to/your/client.crt
# opensearch.ssl.key: /path/to/your/client.key

# Optional setting that enables you to specify a path to the PEM file for the certificate
# authority for your OpenSearch instance.
{% if opensearch_dashboards.opensearch.ssl.ca_list is defined and opensearch_dashboards.opensearch.ssl.ca_list | length %}
opensearch.ssl.certificateAuthorities:
{% for ca in opensearch_dashboards.opensearch.ssl.ca_list %}
  - {{ ca }}
{% endfor %}
{% else %}
# opensearch.ssl.certificateAuthorities: [ "/path/to/your/CA.pem" ]
{% endif %}

# To disregard the validity of SSL certificates, change this setting's value to 'none'.
opensearch.ssl.verificationMode: {{ opensearch_dashboards.opensearch.ssl.verification_mode | default('full') }}

# Time in milliseconds to wait for OpenSearch to respond to pings. Defaults to the value of
# the opensearch.requestTimeout setting.
opensearch.pingTimeout: {{ opensearch_dashboards.opensearch.timeout.ping | default(1500) }}

# Time in milliseconds to wait for responses from the back end or OpenSearch. This value
# must be a positive integer.
opensearch.requestTimeout: {{ opensearch_dashboards.opensearch.timeout.request | default(30000) }}

# List of OpenSearch Dashboards client-side headers to send to OpenSearch. To send *no* client-side
# headers, set this value to [] (an empty list).
opensearch.requestHeadersWhitelist:
{% for header in opensearch_dashboards.opensearch.whitelist_headers_request | default(["authorization", "securitytenant"]) %}
  - {{ header }}
{% endfor %}

# Header names and values that are sent to OpenSearch. Any custom headers cannot be overwritten
# by client-side headers, regardless of the opensearch.requestHeadersWhitelist configuration.
opensearch.customHeaders: {}

# Time in milliseconds for OpenSearch to wait for responses from shards. Set to 0 to disable.
opensearch.shardTimeout: {{ opensearch_dashboards.opensearch.timeout.shard | default(30000) }}

# Logs queries sent to OpenSearch. Requires logging.verbose set to true.
# opensearch.logQueries: false

# Specifies the path where OpenSearch Dashboards creates the process ID file.
pid.file: {{ opensearch_dashboards.pid_file | default("/var/run/opensearchDashboards.pid") }}

# Enables you to specify a file where OpenSearch Dashboards stores log output.
logging.dest: {{ opensearch_dashboards.log_file | default("stdout") }}

# 2.15 Ignore 'ENOSPC' error for logging stream.
# When set to true, the 'ENOSPC' error message will not cause the OpenSearch Dashboards process to crash. Otherwise,
# the original behavior will be maintained. It is disabled by default.
# logging.ignoreEnospcError: false

# Set the value of this setting to true to suppress all logging output.
# logging.silent: false

# Set the value of this setting to true to suppress all logging output other than error messages.
# logging.quiet: false

# Set the value of this setting to true to log all events, including system usage information
# and all requests.
# logging.verbose: false

# Set the interval in milliseconds to sample system and process performance
# metrics. Minimum is 100ms. Defaults to 5000.
ops.interval: {{ opensearch_dashboards.metrics_interval_milliseconds | default(5000) }}

# Specifies locale to be used for all localizable strings, dates and number formats.
# Supported languages are the following: English - en , by default , Chinese - zh-CN .
i18n.locale: "{{ opensearch_dashboards.locale | default('en') }}"

{% if opensearch_dashboards.branding is defined %}
# Setup your branding
opensearchDashboards.branding:
  logo:
    defaultUrl: "{{ opensearch_dashboards.branding.logo_default_url | default('') }}"
    darkModeUrl: "{{ opensearch_dashboards.branding.logo_darkmode_url | default('') }}"
  mark:
    defaultUrl: "{{ opensearch_dashboards.branding.mark_default_url | default('') }}"
    darkModeUrl: "{{ opensearch_dashboards.branding.mark_darkmode_url | default('') }}"
  loadingLogo:
    defaultUrl: "{{ opensearch_dashboards.branding.loading_default_url | default('') }}"
    darkModeUrl: "{{ opensearch_dashboards.branding.loading_default_url | default('') }}"
  faviconUrl: "{{ opensearch_dashboards.branding.favicon_url | default('') }}"
  applicationTitle: "{{ opensearch_dashboards.branding.application_title | default(inventory_hostname) }}"
{% endif %}

# Set the value of this setting to true to capture region blocked warnings and errors
# for your map rendering services.
# map.showRegionBlockedWarning: false

# Set the value of this setting to false to suppress search usage telemetry
# for reducing the load of OpenSearch cluster.
data.search.usageTelemetry.enabled: {{ opensearch_dashboards.telemetry | default(false) }}

# 2.4 renames 'wizard.enabled: false' to 'vis_builder.enabled: false'
# Set the value of this setting to false to disable VisBuilder
# functionality in Visualization.
# vis_builder.enabled: false

# 2.4 New Experimental Feature
# Set the value of this setting to true to enable the experimental multiple data source
# support feature. Use with caution.
# data_source.enabled: false
# Set the value of these settings to customize crypto materials to encryption saved credentials
# in data sources.
# data_source.encryption.wrappingKeyName: 'changeme'
# data_source.encryption.wrappingKeyNamespace: 'changeme'
# data_source.encryption.wrappingKey: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

# 2.6 New ML Commons Dashboards Feature
# Set the value of this setting to true to enable the ml commons dashboards
# ml_commons_dashboards.enabled: false

# 2.12 New experimental Assistant Dashboards Feature
# Set the value of this setting to true to enable the assistant dashboards
# assistant.chat.enabled: false

# 2.13 New Query Assistant Feature
# Set the value of this setting to false to disable the query assistant
# observability.query_assist.enabled: false

# 2.14 Enable Ui Metric Collectors in Usage Collector
# Set the value of this setting to true to enable UI Metric collections
# usageCollection.uiMetric.enabled: false

opensearch_security.multitenancy.enabled: {{ opensearch_dashboards.opensearch.multitenancy_enabled | default(true) }}
opensearch_security.multitenancy.tenants.preferred:
{% for tenant in opensearch_dashboards.opensearch.tenants | default(['Private','Global']) %}
  - {{ tenant }}
{% endfor %}
opensearch_security.readonly_mode.roles:
{% for role in opensearch_dashboards.opensearch.readonly_roles | default(['kibana_read_only']) %}
  - {{ role }}
{% endfor %}
# Use this setting if you are running opensearch-dashboards without https
opensearch_security.cookie.secure: {{ opensearch_dashboards.opensearch.cookies_secure | default(false) }}
